@model AQI_Monitoring_System.Models.RegisterViewModel
@{
    ViewData["Title"] = "Register";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Register</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/LoginStyleSheet.css" asp-append-version="true" />
</head>
<body>
    <div class="container">
        <div class="row justify-content-center mt-5">
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h4 class="text-center m-0">
                            <i class="bi bi-person-plus me-2"></i>Register New Member
                        </h4>
                    </div>
                    <div class="card-body">
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle me-2"></i>@TempData["SuccessMessage"]
                            </div>
                        }
                        <form id="registerForm" method="post" asp-controller="Home" asp-action="Register">
                            <div class="mb-3">
                                <label asp-for="Username" class="form-label">Username</label>
                                <input asp-for="Username" class="form-control" placeholder="Enter username" />
                                <div id="usernameError" class="field-validation-error"></div>
                                <span asp-validation-for="Username" class="field-validation-error"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Email" class="form-label">Email</label>
                                <input asp-for="Email" class="form-control" placeholder="Enter email" />
                                <div id="emailError" class="field-validation-error"></div>
                                <span asp-validation-for="Email" class="field-validation-error"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Password" class="form-label">Password</label>
                                <input asp-for="Password" class="form-control" placeholder="Enter password" />
                                <div id="passwordError" class="field-validation-error"></div>
                                <span asp-validation-for="Password" class="field-validation-error"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="ConfirmPassword" class="form-label">Confirm Password</label>
                                <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm password" />
                                <div id="confirmPasswordError" class="field-validation-error"></div>
                                <span asp-validation-for="ConfirmPassword" class="field-validation-error"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Role" class="form-label">Role</label>
                                <select asp-for="Role" class="form-control">
                                    <option value="">Select a role</option>
                                    <option value="User">User</option>
                                    <option value="Admin">Admin</option>
                                </select>
                                <div id="roleError" class="field-validation-error"></div>
                                <span asp-validation-for="Role" class="field-validation-error"></span>
                            </div>
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                                <button type="submit" class="btn btn-primary" id="registerButton">
                                    <i class="bi bi-person-plus-fill me-2"></i>Register
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="text-center mt-3 mb-5">
                    <a asp-controller="Home" asp-action="MonitorAdminDashboard" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            const usernameField = $('#Username');
            const passwordField = $('#Password');
            const confirmPasswordField = $('#ConfirmPassword');
            const emailField = $('#Email');
            const roleField = $('#Role');
            const registerButton = $('#registerButton');
            let isUsernameUnique = false;

            let touched = {
                username: false,
                email: false,
                password: false,
                confirmPassword: false,
                role: false
            };

            usernameField.on('input blur', () => { touched.username = true; validateUsername(); updateButtonState(); });
            emailField.on('input blur', () => { touched.email = true; validateEmail(); updateButtonState(); });
            passwordField.on('input blur', () => { touched.password = true; validatePassword(); updateButtonState(); });
            confirmPasswordField.on('input blur', () => { touched.confirmPassword = true; validateConfirmPassword(); updateButtonState(); });
            roleField.on('change blur', () => { touched.role = true; validateRole(); updateButtonState(); });

            $('#registerForm').on('submit', function (e) {
                touched.username = true;
                touched.email = true;
                touched.password = true;
                touched.confirmPassword = true;
                touched.role = true;

                if (!validateForm()) {
                    e.preventDefault();
                }
            });

            function validateUsername() {
                if (!touched.username) return true;
                const username = usernameField.val().trim();
                const usernameError = $('#usernameError');
                usernameField.removeClass('is-invalid');
                usernameError.text('');

                if (username === '') {
                    usernameField.addClass('is-invalid');
                    usernameError.text('Username is required');
                    return false;
                }
                if (username.length < 8) {
                    usernameField.addClass('is-invalid');
                    usernameError.text('Username must be at least 8 characters long');
                    return false;
                }

                $.ajax({
                    url: '/Home/CheckUsername',
                    method: 'POST',
                    data: { username: username },
                    success: function (response) {
                        if (response.exists) {
                            usernameField.addClass('is-invalid');
                            usernameError.text('Username is already taken');
                            isUsernameUnique = false;
                        } else {
                            isUsernameUnique = true;
                        }
                        updateButtonState();
                    }
                });

                return true;
            }

            function validateEmail() {
                if (!touched.email) return true;
                const email = emailField.val().trim();
                const emailError = $('#emailError');
                emailField.removeClass('is-invalid');
                emailError.text('');

                if (email === '') {
                    emailField.addClass('is-invalid');
                    emailError.text('Email is required');
                    return false;
                }
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(email)) {
                    emailField.addClass('is-invalid');
                    emailError.text('Invalid email address');
                    return false;
                }

                return true;
            }

            function validatePassword() {
                if (!touched.password) return true;
                const password = passwordField.val().trim();
                const passwordError = $('#passwordError');
                passwordField.removeClass('is-invalid');
                passwordError.text('');

                if (password === '') {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password is required');
                    return false;
                }
                if (!/(?=.*[a-z])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one lowercase letter');
                    return false;
                }
                if (!/(?=.*[A-Z])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one uppercase letter');
                    return false;
                }
                if (!/(?=.*[!@@#$%^&*])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one special character');
                    return false;
                }
                if (password.length < 6) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must be at least 6 characters');
                    return false;
                }

                validateConfirmPassword();
                return true;
            }

            function validateConfirmPassword() {
                if (!touched.confirmPassword) return true;
                const password = passwordField.val().trim();
                const confirmPassword = confirmPasswordField.val().trim();
                const confirmPasswordError = $('#confirmPasswordError');
                confirmPasswordField.removeClass('is-invalid');
                confirmPasswordError.text('');

                if (confirmPassword === '') {
                    confirmPasswordField.addClass('is-invalid');
                    confirmPasswordError.text('Confirm password is required');
                    return false;
                }
                if (password !== confirmPassword) {
                    confirmPasswordField.addClass('is-invalid');
                    confirmPasswordError.text('Passwords do not match');
                    return false;
                }

                return true;
            }

            function validateRole() {
                if (!touched.role) return true;
                const role = roleField.val();
                const roleError = $('#roleError');
                roleField.removeClass('is-invalid');
                roleError.text('');

                if (role === '') {
                    roleField.addClass('is-invalid');
                    roleError.text('Role is required');
                    return false;
                }

                return true;
            }

            function validateForm() {
                const isUsernameValid = validateUsername();
                const isEmailValid = validateEmail();
                const isPasswordValid = validatePassword();
                const isConfirmPasswordValid = validateConfirmPassword();
                const isRoleValid = validateRole();

                return isUsernameValid && isPasswordValid && isConfirmPasswordValid && isRoleValid && isUsernameUnique;
            }

            function updateButtonState() {
                const isFormValid = validateForm();
                registerButton.prop('disabled', !isFormValid);
            }
        });
    </script>
</body>
</html>