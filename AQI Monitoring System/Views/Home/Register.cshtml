@model AQI_Monitoring_System.Models.RegisterViewModel
@{
    ViewData["Title"] = "Register";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Register</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/LoginStyleSheet.css"/>
    <style>
        .error-message { color: red; font-size: 0.875em; margin-top: 0.25em; }
        .is-invalid { border-color: red; }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center mt-5">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center">Register</h4>
                    </div>
                    <div class="card-body">
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success">
                                @TempData["SuccessMessage"]
                            </div>
                        }
                        <form id="registerForm" method="post" asp-controller="Home" asp-action="Register">
                            <div class="form-group mb-3">
                                <label asp-for="Username">Username</label>
                                <input asp-for="Username" class="form-control" placeholder="Enter username" />
                                <div id="usernameError" class="error-message"></div>
                                <span asp-validation-for="Username" class="error-message"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="Email">Email</label>
                                <input asp-for="Email" class="form-control" placeholder="Enter email" />
                                <span asp-validation-for="Email" class="error-message"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="Password">Password</label>
                                <input asp-for="Password" class="form-control" placeholder="Enter password" />
                                <div id="passwordError" class="error-message"></div>
                                <span asp-validation-for="Password" class="error-message"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="ConfirmPassword">Confirm Password</label>
                                <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm password" />
                                <div id="confirmPasswordError" class="error-message"></div>
                                <span asp-validation-for="ConfirmPassword" class="error-message"></span>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary" id="registerButton">Register</button>
                            </div>
                        </form>
                    </div>
                    <div class="card-footer text-center">
                        <p class="mb-0">Already have an account? <a asp-controller="Home" asp-action="Login">Login</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            const usernameField = $('#Username');
            const passwordField = $('#Password');
            const confirmPasswordField = $('#ConfirmPassword');
            const registerButton = $('#registerButton');
            let isUsernameUnique = false;

            // Real-time validation as user types
            usernameField.on('input', validateUsername);
            passwordField.on('input', validatePassword);
            confirmPasswordField.on('input', validateConfirmPassword);

            // Form submission validation
            $('#registerForm').on('submit', function (e) {
                if (!validateForm()) {
                    e.preventDefault();
                }
            });

            function validateUsername() {
                const username = usernameField.val().trim();
                const usernameError = $('#usernameError');
                usernameField.removeClass('is-invalid');
                usernameError.text('');

                if (username === '') {
                    usernameField.addClass('is-invalid');
                    usernameError.text('Username is required');
                    return false;
                }
                if (username.length < 8) {
                    usernameField.addClass('is-invalid');
                    usernameError.text('Username must be at least 8 characters long');
                    return false;
                }

                // Check uniqueness via AJAX (simplified for demo)
                $.ajax({
                    url: '/Home/CheckUsername',
                    method: 'POST',
                    data: { username: username },
                    success: function (response) {
                        if (response.exists) {
                            usernameField.addClass('is-invalid');
                            usernameError.text('Username is already taken');
                            isUsernameUnique = false;
                        } else {
                            isUsernameUnique = true;
                        }
                        updateButtonState();
                    }
                });

                return true;
            }

            function validatePassword() {
                const password = passwordField.val().trim();
                const passwordError = $('#passwordError');
                passwordField.removeClass('is-invalid');
                passwordError.text('');

                if (password === '') {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password is required');
                    return false;
                }
                if (!/(?=.*[a-z])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one lowercase letter');
                    return false;
                }
                if (!/(?=.*[A-Z])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one uppercase letter');
                    return false;
                }
                if (!/(?=.*[!@@#$%^&*])/.test(password)) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must contain at least one special character');
                    return false;
                }
                if (password.length < 6) {
                    passwordField.addClass('is-invalid');
                    passwordError.text('Password must be at least 6 characters');
                    return false;
                }

                // Re-validate confirm password when password changes
                validateConfirmPassword();
                return true;
            }

            function validateConfirmPassword() {
                const password = passwordField.val().trim();
                const confirmPassword = confirmPasswordField.val().trim();
                const confirmPasswordError = $('#confirmPasswordError');
                confirmPasswordField.removeClass('is-invalid');
                confirmPasswordError.text('');

                if (confirmPassword === '') {
                    confirmPasswordField.addClass('is-invalid');
                    confirmPasswordError.text('Confirm password is required');
                    return false;
                }
                if (password !== confirmPassword) {
                    confirmPasswordField.addClass('is-invalid');
                    confirmPasswordError.text('Passwords do not match');
                    return false;
                }

                return true;
            }

            function validateForm() {
                const isUsernameValid = validateUsername();
                const isPasswordValid = validatePassword();
                const isConfirmPasswordValid = validateConfirmPassword();

                return isUsernameValid && isPasswordValid && isConfirmPasswordValid && isUsernameUnique;
            }

            function updateButtonState() {
                const isFormValid = validateForm();
                registerButton.prop('disabled', !isFormValid);
            }

            // Initial validation
            updateButtonState();
            usernameField.on('input', updateButtonState);
            passwordField.on('input', updateButtonState);
            confirmPasswordField.on('input', updateButtonState);
        });
    </script>
</body>
</html>