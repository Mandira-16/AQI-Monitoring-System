@model List<AQI_Monitoring_System.Models.AqiReading>
@{
	ViewData["Title"] = "Colombo Air Quality Dashboard";
}

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<!-- Chart.js for pop-up trends -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container">
	<div class="marker-popup" id="markerPopup" style="display: none; position: absolute; z-index: 1000; background-color: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); padding: 12px; width: 240px;">
		<div class="popup-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
			<h5 id="popupLocation" style="margin: 0; font-weight: 600;">Sensor Location</h5>
			<span id="popupAqi" style="font-size: 24px; font-weight: bold; padding: 2px 8px; border-radius: 4px;">0</span>
		</div>
		<div class="popup-body">
			<p><strong>Last updated:</strong> <span id="popupTime">-</span></p>
			<div id="popupPollutants" style="margin: 8px 0;">
				<!-- Pollutant details will be inserted here -->
			</div>
			<a id="popupHistoryLink" class="btn btn-sm btn-primary" style="width: 100%;">View History</a>
		</div>
	</div>
	<!-- Map -->
	<div id="map-container">
		<div id="map" style="height: 400px;"></div>
	</div>
	<script>
		// Global variables for popup management
		let popup = document.getElementById('markerPopup');
		let activeMarker = null;
		let markerElements = [];  // This will be populated after markers are created

		// Function to show popup when hovering over a marker
		function showPopup(event, marker) {
			activeMarker = marker;

			// Get marker data
			const sensorId = marker.getAttribute('data-sensor-id');
			const location = marker.getAttribute('data-location');
			const aqi = marker.getAttribute('data-aqi');
			const updated = marker.getAttribute('data-updated');

			// Set popup content
			document.getElementById('popupLocation').textContent = location;
			document.getElementById('popupAqi').textContent = aqi;
			document.getElementById('popupTime').textContent = updated;

			// Set background color based on AQI value
			const aqiValue = parseInt(aqi);
			let bgColor = getAqiColor(aqiValue);
			document.getElementById('popupAqi').style.backgroundColor = bgColor;

			// Set text color (white for dark backgrounds, black for light backgrounds)
			document.getElementById('popupAqi').style.color =
				(aqiValue > 100) ? 'white' : 'black';

			// Populate pollutants
			let pollutantsHtml = '';
			if (marker.getAttribute('data-pm25'))
				pollutantsHtml += `<div>PM2.5: ${marker.getAttribute('data-pm25')} μg/m³</div>`;
			if (marker.getAttribute('data-pm10'))
				pollutantsHtml += `<div>PM10: ${marker.getAttribute('data-pm10')} μg/m³</div>`;
			if (marker.getAttribute('data-o3'))
				pollutantsHtml += `<div>O₃: ${marker.getAttribute('data-o3')} ppb</div>`;
			if (marker.getAttribute('data-no2'))
				pollutantsHtml += `<div>NO₂: ${marker.getAttribute('data-no2')} ppb</div>`;

			document.getElementById('popupPollutants').innerHTML = pollutantsHtml;

			// Set history link
			document.getElementById('popupHistoryLink').href = `/Home/SensorHistory?sensorId=${sensorId}`;

			// Position popup near marker
			const rect = marker.getBoundingClientRect();
			popup.style.left = (rect.left + window.scrollX) + 'px';
			popup.style.top = (rect.bottom + window.scrollY + 10) + 'px'; // 10px below marker

			// Show popup
			popup.style.display = 'block';

			// Add hover capability to the popup itself
			popup.addEventListener('mouseenter', () => {
				popup.style.display = 'block';
			});

			popup.addEventListener('mouseleave', hidePopupIfNotHovered);
		}

		// Function to hide popup when mouse leaves marker and popup
		function hidePopupIfNotHovered() {
			// Use a short timeout to check if we're now hovering over the popup
			setTimeout(() => {
				const isHoveringPopup = popup.matches(':hover');
				const isHoveringMarker = activeMarker && activeMarker.matches(':hover');

				if (!isHoveringPopup && !isHoveringMarker) {
					popup.style.display = 'none';
				}
			}, 100);
		}

		// Helper function to get color based on AQI
		function getAqiColor(aqi) {
			if (aqi <= 50) return '#009966'; // Good
			if (aqi <= 100) return '#FFDE33'; // Moderate
			if (aqi <= 150) return '#FF9933'; // Unhealthy for Sensitive Groups
			if (aqi <= 200) return '#CC0033'; // Unhealthy
			if (aqi <= 300) return '#660099'; // Very Unhealthy
			return '#7E0023'; // Hazardous
		}

		// Example for Leaflet.js implementation
		function createMarkers(map, sensorData) {
			sensorData.forEach(sensor => {
				// Create a marker with appropriate icon
				const markerIcon = L.divIcon({
					className: 'sensor-marker',
					html: `<div class="marker-circle" style="background-color: ${getAqiColor(sensor.aqi)};">${sensor.aqi}</div>`,
					iconSize: [40, 40]
				});

				const marker = L.marker([sensor.latitude, sensor.longitude], { icon: markerIcon });

				// Set data attributes
				const markerElement = marker.getElement();
				markerElement.setAttribute('data-sensor-id', sensor.sensorId);
				markerElement.setAttribute('data-location', sensor.location);
				markerElement.setAttribute('data-aqi', sensor.aqi);
				markerElement.setAttribute('data-updated', new Date(sensor.recordedAt).toLocaleString());

				// Add pollutant data if available
				if (sensor.pm25) markerElement.setAttribute('data-pm25', sensor.pm25);
				if (sensor.pm10) markerElement.setAttribute('data-pm10', sensor.pm10);
				if (sensor.o3) markerElement.setAttribute('data-o3', sensor.o3);
				if (sensor.no2) markerElement.setAttribute('data-no2', sensor.no2);

				marker.addTo(map);

				// Store marker element for later use
				markerElements.push(markerElement);
			});

			// Set up event listeners for markers after they're created
			markerElements.forEach(marker => {
				marker.addEventListener('mouseenter', (e) => showPopup(e, marker));
				marker.addEventListener('mouseleave', hidePopupIfNotHovered);
			});
		}
	</script>

	<div class="content mt-4">
		<h2>Real-Time Air Quality in Colombo</h2>
		<p>View the latest Air Quality Index (AQI) readings from sensors across Colombo.</p>

		<!-- Latest Readings Table -->
		<div class="row mt-3">
			<div class="col-md-12">
				<h3>Current Readings</h3>
				@if (Model.Any())
				{
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Sensor ID</th>
								<th>Location</th>
								<th>AQI</th>
								<th>Recorded At</th>
								<th>History</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var reading in Model)
							{
								<tr>
									<td>@reading.SensorId</td>
									<td>@(reading.Sensor?.Location ?? "Unknown")</td>
									<td style="background-color: @(GetAqiColor(reading.Aqi))">@reading.Aqi</td>
									<td>@reading.RecordedAt.ToString("yyyy-MM-dd HH:mm")</td>
									<td><a href="@Url.Action("SensorHistory", new { sensorId = reading.SensorId })" class="btn btn-sm btn-info">View History</a></td>
								</tr>
							}
						</tbody>
					</table>
				}
				else
				{
					<p>No current readings available.</p>
				}
			</div>
		</div>

		<!-- Dynamic AQI Legend -->
		<div class="row mt-4">
			<div class="col-md-12">
				<h3>AQI Legend</h3>
				<table class="aqi-table">
					<thead>
						<tr>
							<th>AQI Range</th>
							<th>Level of Health Concern</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var threshold in (List<AQI_Monitoring_System.Models.AlertThreshold>)ViewBag.Thresholds)
						{
							<tr style="background-color: rgba(@(HexToRgb(threshold.Color)), 0.1)">
								<td>@threshold.MinAqi-@threshold.MaxAqi</td>
								<td>@threshold.Category</td>
								<td>@GetDescription(threshold.Category)</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Static Info -->
		<div class="pollutant-info mt-4">
			<h3>Major Pollutants Measured</h3>
			<div class="row">
				<div class="col-md-6">
					<h4>PM2.5</h4>
					<p>Fine particulate matter (diameter less than 2.5 micrometers) that can penetrate deep into the lungs and even enter the bloodstream.</p>
					<h4>PM10</h4>
					<p>Particulate matter with a diameter between 2.5 and 10 micrometers.</p>
					<h4>O3 (Ozone)</h4>
					<p>A gas that forms when pollutants react in sunlight.</p>
				</div>
				<div class="col-md-6">
					<h4>NO2 (Nitrogen Dioxide)</h4>
					<p>A gas from vehicle exhaust and power plants.</p>
					<h4>SO2 (Sulfur Dioxide)</h4>
					<p>A gas from fossil fuel combustion.</p>
					<h4>CO (Carbon Monoxide)</h4>
					<p>A gas from incomplete fuel combustion.</p>
				</div>
			</div>
		</div>

		<div class="mt-4">
			<h3>Protect Your Health</h3>
			<p>When AQI levels are high:</p>
			<ul>
				<li>Reduce outdoor activities</li>
				<li>Keep windows closed</li>
				<li>Use air purifiers</li>
				<li>Wear masks (N95 or better)</li>
				<li>Stay hydrated</li>
				<li>Follow health authority advice</li>
			</ul>
		</div>

		<div class="mt-4">
			<p>Data simulated by Colombo Air Quality Monitoring System</p>
		</div>
	</div>
</div>

<style>
	.aqi-table {
		width: 100%;
		border-collapse: collapse;
	}

		.aqi-table th, .aqi-table td {
			padding: 8px;
			border: 1px solid #ddd;
		}

		.aqi-table th {
			background-color: #f2f2f2;
		}

	.legend {
		background: white;
		padding: 10px;
		border: 1px solid #ccc;
	}

		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
		}
</style>

@section Scripts {
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		var map = L.map('map').setView([6.9271, 79.8612], 12);
		L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
		}).addTo(map);

		var sensors = @Html.Raw(Json.Serialize(Model.Select(r => new { sensorId = r.SensorId, lat = r.Sensor.Latitude, lon = r.Sensor.Longitude, aqi = r.Aqi, location = r.Sensor.Location })));
		var history = @Html.Raw(Json.Serialize(ViewBag.History));
		var thresholds = @Html.Raw(Json.Serialize(ViewBag.Thresholds));

		function getAqiColor(aqi) {
			for (var i = 0; i < thresholds.length; i++) {
				if (aqi >= thresholds[i].minAqi && aqi <= thresholds[i].maxAqi) {
					return thresholds[i].color;
				}
			}
			return '#000000';
		}

		sensors.forEach(function (sensor) {
			var color = getAqiColor(sensor.aqi);
			var marker = L.circleMarker([sensor.lat, sensor.lon], {
				radius: 8,
				fillColor: color,
				color: "#000",
				weight: 1,
				opacity: 1,
				fillOpacity: 0.8
			}).addTo(map);

			var popupContent = `
								<b>${sensor.location} (Sensor ${sensor.sensorId})</b><br>
								Current AQI: ${sensor.aqi}<br>
								<a href="/Home/SensorHistory?sensorId=${sensor.sensorId}&period=day">View History</a>
							`;
			marker.bindPopup(popupContent);
		});

		var legend = L.control({ position: 'bottomright' });
		legend.onAdd = function (map) {
			var div = L.DomUtil.create('div', 'legend');
			div.innerHTML = '<h4>AQI Legend</h4>';
			thresholds.forEach(function (t) {
				div.innerHTML += `<i style="background: ${t.color}"></i> ${t.category} (${t.minAqi}-${t.maxAqi})<br>`;
			});
			return div;
		};
		legend.addTo(map);
	</script>
}

@functions {
	string GetAqiColor(int aqi)
	{
		var thresholds = ViewBag.Thresholds as List<AQI_Monitoring_System.Models.AlertThreshold>;
		if (thresholds == null || !thresholds.Any())
		{
			return "#000000"; // Default color if thresholds are not available
		}
		var threshold = thresholds.FirstOrDefault(t => aqi >= t.MinAqi && aqi <= t.MaxAqi);
		return threshold?.Color ?? "#000000";
	}

	string HexToRgb(string hex)
	{
		hex = hex.TrimStart('#');
		var r = Convert.ToInt32(hex.Substring(0, 2), 16);
		var g = Convert.ToInt32(hex.Substring(2, 2), 16);
		var b = Convert.ToInt32(hex.Substring(4, 2), 16);
		return $"{r}, {g}, {b}";
	}

	string GetDescription(string category)
	{
		return category switch
		{
			"Good" => "Air quality is satisfactory, posing little or no risk.",
			"Moderate" => "Air quality is acceptable; moderate concern for sensitive individuals.",
			"Unhealthy for Sensitive Groups" => "Sensitive groups may experience health effects.",
			"Unhealthy" => "Everyone may experience health effects; sensitive groups worse.",
			"Very Unhealthy" => "Health warnings; entire population affected.",
			"Hazardous" => "Health alert; serious effects for everyone.",
			_ => "No description available."
		};
	}
}