@model List<AQI_Monitoring_System.Models.AqiReading>
@{
	ViewData["Title"] = "Colombo Air Quality Dashboard";
	ViewData["ActivePage"] = "Home";
	Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/IndexStyleSheet.css" asp-append-version="true" />
<div class="container">
	<div class="container-fluid">
		<div class="card">
			<div class="card-body">
				<h5 class="card-title"><i class="bi bi-map me-2"></i>Air Quality Map</h5>
				@await Html.PartialAsync("_MapPartial", Model)
			</div>
		</div>
	</div>

	<div class="content mt-4">
		<h2>Real-Time Air Quality in Colombo</h2>
		<p>View the latest Air Quality Index (AQI) readings from sensors across Sri Lanka.</p>

		<!-- Latest Readings Table -->
		<div class="row mt-3">
			<div class="col-md-12">
				<h3>Current Readings</h3>
				@if (Model.Any())
				{
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Sensor ID</th>
								<th>Location</th>
								<th>AQI</th>
								<th>PM2.5 (µg/m³)</th>
								<th>PM10 (µg/m³)</th>
								<th>O3 (ppb)</th>
								<th>NO2 (ppb)</th>
								<th>SO2 (ppb)</th>
								<th>CO (ppm)</th>
								<th>Recorded At</th>
								<th>History</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var reading in Model)
							{
								<tr>
									<td>@reading.SensorId</td>
									<td>@(reading.Sensor?.Location ?? "Unknown")</td>
									<td style="background-color: @(GetAqiColor(reading.Aqi))">@reading.Aqi</td>
									<td>@(reading.Pm25?.ToString("F2") ?? "N/A")</td>
									<td>@(reading.Pm10?.ToString("F2") ?? "N/A")</td>
									<td>@(reading.O3?.ToString("F2") ?? "N/A")</td>
									<td>@(reading.No2?.ToString("F2") ?? "N/A")</td>
									<td>@(reading.So2?.ToString("F2") ?? "N/A")</td>
									<td>@(reading.Co?.ToString("F2") ?? "N/A")</td>
									<td>@reading.RecordedAt.AddHours(5.5).ToString("yyyy-MM-dd HH:mm")</td>
									<td><a href="@Url.Action("SensorHistory", new { sensorId = reading.SensorId })" class="btn btn-sm btn-info">View History</a></td>
								</tr>
							}
						</tbody>
					</table>
				}
				else
				{
					<p>No current readings available.</p>
				}
			</div>
		</div>

		<!-- Dynamic AQI Legend -->
		<div class="row mt-4">
			<div class="col-md-12">
				<h3>AQI Legend</h3>
				<table class="aqi-table">
					<thead>
						<tr>
							<th>AQI Range</th>
							<th>Level of Health Concern</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var threshold in (List<AQI_Monitoring_System.Models.AlertThreshold>)ViewBag.Thresholds)
						{
							<tr style="background-color: rgba(@(HexToRgb(threshold.Color)), 0.1)">
								<td>@threshold.MinAqi-@threshold.MaxAqi</td>
								<td>@threshold.Category</td>
								<td>@GetDescription(threshold.Category)</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Static Info -->
		<div class="pollutant-info mt-4">
			<h3>Major Pollutants Measured</h3>
			<div class="row">
				<div class="col-md-6">
					<h4>PM2.5</h4>
					<p>Fine particulate matter (diameter less than 2.5 micrometers) that can penetrate deep into the lungs and even enter the bloodstream.</p>
					<h4>PM10</h4>
					<p>Particulate matter with a diameter between 2.5 and 10 micrometers.</p>
					<h4>O3 (Ozone)</h4>
					<p>A gas that forms when pollutants react in sunlight.</p>
				</div>
				<div class="col-md-6">
					<h4>NO2 (Nitrogen Dioxide)</h4>
					<p>A gas from vehicle exhaust and power plants.</p>
					<h4>SO2 (Sulfur Dioxide)</h4>
					<p>A gas from fossil fuel combustion.</p>
					<h4>CO (Carbon Monoxide)</h4>
					<p>A gas from incomplete fuel combustion.</p>
				</div>
			</div>
		</div>

		<div class="mt-4">
			<h3>Protect Your Health</h3>
			<p>When AQI levels are high:</p>
			<ul>
				<li>Reduce outdoor activities</li>
				<li>Keep windows closed</li>
				<li>Use air purifiers</li>
				<li>Wear masks (N95 or better)</li>
				<li>Stay hydrated</li>
				<li>Follow health authority advice</li>
			</ul>
		</div>

		<div class="mt-4">
			<p>Data simulated by Colombo Air Quality Monitoring System</p>
		</div>
	</div>
</div>

@functions {
	string GetAqiColor(int aqi)
	{
		var thresholds = ViewBag.Thresholds as List<AQI_Monitoring_System.Models.AlertThreshold>;
		if (thresholds == null || !thresholds.Any())
		{
			return "#000000"; // Default color if thresholds are not available
		}
		var threshold = thresholds.FirstOrDefault(t => aqi >= t.MinAqi && aqi <= t.MaxAqi);
		return threshold?.Color ?? "#000000";
	}

	string HexToRgb(string hex)
	{
		hex = hex.TrimStart('#');
		var r = Convert.ToInt32(hex.Substring(0, 2), 16);
		var g = Convert.ToInt32(hex.Substring(2, 2), 16);
		var b = Convert.ToInt32(hex.Substring(4, 2), 16);
		return $"{r}, {g}, {b}";
	}

	string GetDescription(string category)
	{
		return category switch
		{
			"Good" => "Air quality is satisfactory, posing little or no risk.",
			"Moderate" => "Air quality is acceptable; moderate concern for sensitive individuals.",
			"Unhealthy for Sensitive Groups" => "Sensitive groups may experience health effects.",
			"Unhealthy" => "Everyone may experience health effects; sensitive groups worse.",
			"Very Unhealthy" => "Health warnings; entire population affected.",
			"Hazardous" => "Health alert; serious effects for everyone.",
			_ => "No description available."
		};
	}
}